services:
  api:
    profiles: ["core"]
    image: ${REGISTRY}/${IMAGE_NAME}:${TAG}
    restart: always
    command: ["gunicorn", "-c", "gunicorn.conf.py", "run:app"]
    env_file:
      - .env
    environment:
      # Tuning do Gunicorn em produção (pode ser ajustado via secrets/vars do CI)
      - GUNICORN_WORKERS=8
      - GUNICORN_THREADS=1
      - GUNICORN_WORKER_CONNECTIONS=1000
      - GUNICORN_BACKLOG=2048
      - GUNICORN_TIMEOUT=60
      - GUNICORN_KEEPALIVE=5
      - GUNICORN_MAX_REQUESTS=500
      - GUNICORN_MAX_REQUESTS_JITTER=50
    ports:
      - "${API_PORT:-5000}:5000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - poo-network
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:5000/v1/health/')\""]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s


  # Workers por fila (isolados) + Beat
  worker_ia:
    profiles: ["core"]
    image: ${REGISTRY}/${IMAGE_NAME}:${TAG}
    restart: always
    command: ["python","worker.py","worker","--loglevel=info","-Q","ia_queue","--concurrency=1","--max-tasks-per-child=20"]
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - poo-network
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      - /etc/localtime:/etc/localtime:ro

  beat:
    profiles: ["core"]
    image: ${REGISTRY}/${IMAGE_NAME}:${TAG}
    restart: always
    command: ["celery","-A","app.tasks.celery_config:celery_app","beat","-l","INFO","-S","celery.beat.PersistentScheduler"]
    env_file:
      - .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - poo-network
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      - /etc/localtime:/etc/localtime:ro

  # RabbitMQ
  rabbitmq:
    profiles: ["core"]
    image: rabbitmq:4.1.3-management
    restart: always
    ports:
      - "${RABBITMQ_MGMT_PORT:-15672}:15672"
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_METRICS_PORT:-15692}:15692"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - poo-network

  # Redis
  redis:
    profiles: ["core"]
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - poo-network

  # MySQL
  mysql:
    profiles: ["core"]
    image: mysql:8.0.38
    restart: always
    environment:
      MYSQL_DATABASE: ${SQL_DATABASE:-pegdb}
      MYSQL_USER: ${SQL_USERNAME:-admin}
      MYSQL_PASSWORD: ${SQL_PASSWORD:-admin}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - poo-network

networks:
  poo-network:
    driver: bridge
    name: poo-network

volumes:
  rabbitmq_data:
  mysql_data: